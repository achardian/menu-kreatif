datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    bio           String?
    username      String?
    accounts      Account[]
    sessions      Session[]
    recipes       Recipe[]
    likes         Like[]
    save          Save[]
    reviews       Review[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Recipe {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    title         String
    slug          String
    image         String
    ingredients   String
    instructions  String
    estimatedTime Int
    difficulty    String
    tags          String[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    userId        String   @db.ObjectId
    author        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    likes         Like[]
    save          Save[]
    reviews       Review[]
}

model Like {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    recipeId String @db.ObjectId
    userId   String @db.ObjectId
    recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Save {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    recipeId String @db.ObjectId
    userId   String @db.ObjectId
    recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    body     String @db.String
    recipeId String @db.ObjectId
    userId   String @db.ObjectId
    recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
